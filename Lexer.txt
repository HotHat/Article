* How to write a Lexer

  php as example
  descrpte by scheme

** keywords
   '(
   "__halt_compiler",    "T_HALT_COMPILER",
   "abstract",           "T_ABSTRACT",
   "and",
   "array",
   "as",
   "break",
   "callable",
   "case",
   "catch",
   "class",
   "clone",
   "const",
   "continue",
   "declare",
   "default",
   "die",
   "do",
   "echo",
   "else",
   "elseif",
   "empty",
   "enddeclare",
   "endfor",
   "endforeach",
   "endif",
   "endswitch",
   "endwhile",
   "eval",
   "exit",
   "extends",
   "final",
   "for",
   "foreach",
   "function",
   "global",
   "goto",
   "if",
   "implements",
   "include",
   "include_once",
   "instanceof",
   "insteadof",
   "interface",
   "isset",
   "list",
   "namespace",
   "new",
   "or",
   "print",
   "private",
   "protected",
   "public",
   "require",
   "require_once",
   "return",
   "static",
   "switch",
   "throw",
   "trait",
   "try",
   "unset",
   "use",
   "var",
   "while",
   "xor")

   '("__CLASS__", "__DIR__", "__FILE__", "__FUNCTION__", "__LINE__", "__METHOD__", "__NAMESPACE__", "__TRAIT__")

   "**"           | "T_POW",
   "..."          | "T_ELLIPSIS",

   "require_once" | "T_REQUIRE_ONCE",
   "require"      | "T_REQUIRE",
   "eval"         | "T_EVAL",
   "include_once" | "T_INCLUDE_ONCE",
   "include"      | "T_INCLUDE",
   "or"           | "T_LOGICAL_OR",
   "xor"          | "T_LOGICAL_XOR",
   "and"          | "T_LOGICAL_AND",
   "print"        | "T_PRINT",
   "/="           | "T_DIV_EQUAL",
   "*="             "T_MUL_EQUAL",
   "-="           | "T_MINUS_EQUAL",
   "+="           | "T_PLUS_EQUAL",
   "||"           | "T_BOOLEAN_OR",
   "&&"           | "T_BOOLEAN_AND",

   "echo"         | "T_ECHO",
   "do"           | "T_DO",
   "while"        | "T_WHILE",
   "endwhile"     | "T_ENDWHILE",
   "for"          | "T_FOR",
   "endfor"       | "T_ENDFOR",
   "foreach"      | "T_FOREACH",
   "endforeach"   | "T_ENDFOREACH",
   "declare"      | "T_DECLARE",
   "enddeclare"   | "T_ENDDECLARE",
   "as"           | "T_AS",
   "switch"       | "T_SWITCH",
   "endswitch"    | "T_ENDSWITCH",
   "case"         | "T_CASE",
   "default"      | "T_DEFAULT",
   "break"        | "T_BREAK",
   "continue"     | "T_CONTINUE",
   "goto"         | "T_GOTO",
   "function"     | "T_FUNCTION",
   "const"        | "T_CONST",
   "return"       | "T_RETURN",
   "yield"        | "T_YIELD",
   "try"          | "T_TRY",
   "catch"        | "T_CATCH",
   "finally"      | "T_FINALLY",
   "throw"        | "T_THROW",
   "use"          | "T_USE",
   "instanceof"   | "T_INSTEADOF",
   "global"       | "T_GLOBAL",
   "public"       | "T_PUBLIC",
   "protected"    | "T_PROTECTED",
   "private"      | "T_PRIVATE",
   "final"        | "T_FINAL",

   "static"       | "T_STATIC",
   "var"          | "T_VAR",
   "unset"        | "T_UNSET",
   "isset"        | "T_ISSET",
   "empty"        | "T_EMPTY",

   "class"        | "T_CLASS",
   "trait"        | "T_TRAIT",
   "interface"    | "T_INTERFACE",
   "extends"      | "T_EXTENDS",
   "implements"   | "T_IMPLEMENTS",
   "list"         | "T_LIST",
   "array"        | "T_ARRAY",
   "callable"     | "T_CALLABLE",

   "T_POW_EQUAL",
   "T_SR_EQUAL",
   "T_SL_EQUAL",
   "T_XOR_EQUAL",
   "T_OR_EQUAL",
   "T_AND_EQUAL",
   "T_MOD_EQUAL",
   "T_CONCAT_EQUAL",

   "T_IS_NOT_IDENTICAL",
   "T_IS_IDENTICAL",
   "T_IS_NOT_EQUAL",
   "T_IS_EQUAL",
   "T_IS_GREATER_OR_EQUAL",
   "T_IS_SMALLER_OR_EQUAL",
   "T_SR",
   "T_SL",
   "T_INSTANCEOF",
   "T_UNSET_CAST",
   "T_BOOL_CAST",
   "T_OBJECT_CAST",
   "T_ARRAY_CAST",
   "T_STRING_CAST",
   "T_DOUBLE_CAST",
   "T_INT_CAST",
   "T_DEC",
   "T_INC",
   "T_CLONE",
   "T_NEW",
   "T_EXIT",
   "T_IF",
   "T_ELSEIF",
   "T_ELSE",
   "T_ENDIF",
   "T_LNUMBER",
   "T_DNUMBER",
   "T_STRING",
   "T_STRING_VARNAME",
   "T_VARIABLE",
   "T_NUM_STRING",
   "T_INLINE_HTML",
   "T_CHARACTER",
   "T_BAD_CHARACTER",
   "T_ENCAPSED_AND_WHITESPACE",
   "T_CONSTANT_ENCAPSED_STRING",
   "T_OBJECT_OPERATOR",
   "T_DOUBLE_ARROW",
   
   "T_CLASS_C",
   "T_TRAIT_C",
   "T_METHOD_C",
   "T_FUNC_C",
   "T_LINE",
   "T_FILE",
   "T_COMMENT",
   "T_DOC_COMMENT",
   "T_OPEN_TAG",
   "T_OPEN_TAG_WITH_ECHO",
   "T_CLOSE_TAG",
   "T_WHITESPACE",
   "T_START_HEREDOC",
   "T_END_HEREDOC",
   "T_DOLLAR_OPEN_CURLY_BRACES",
   "{" | "T_CURLY_OPEN",
   "T_PAAMAYIM_NEKUDOTAYIM",
   "namespace" | "T_NAMESPACE",
   "T_NS_C",
   "T_DIR",
   "\\" | "T_NS_SEPARATOR",
   "::" | "T_DOUBLE_COLON",

** variable
   regex: "[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*"

** operators
   "==="
   "!=="
   "<<="
   ">>="
   "<?="
   "<%="
   -------------------------
   "&="
   "&&"
   "||"
   "?>"
   "%>"
   ".="
   "--"
   "/="
   "=>"
   "::"
   "++"
   "=="
   ">="
   "<>"
   "<="
   "-="
   "%="
   "->"
   "|="
   "+="
   "<<"
   ">>"
   "^="
   "<?"
   

** delimirators
   ";(){}[],~@`=+/-*.$|^&<>%!?:\"'\\"

** constant
  1) string
     '....'
     "...."
  2) numbers: interger/ float
     123456
     [+-]?\d+(\.\d+([Ee][+-]?\d+))?
  3) bool et. 
  4) comment
     "//"
     "/* ... */"
     
** Position index 
   read postion index
   
